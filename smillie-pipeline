#!/usr/bin/env python3

import subprocess
import os
import argparse
import sys


def check_file_exists(filename):
    if not os.path.isfile(filename):
        raise argparse.ArgumentTypeError(f'Invalid file name: {filename}')

    return filename


def add_snake_arg(command, key, value):
    command.append(f'{key}={value}')
    return command


def get_snakemake_command(args):

    snakepath = os.path.dirname(os.path.abspath(__file__))

    snakefile = os.path.join(snakepath, 'rules', 'controller.smk')
    profile = os.path.join(snakepath, 'default_configs')
    resources_config = os.path.join(snakepath, 'resources.yaml')
    scripts_path = os.path.join(snakepath, 'scripts')


    command = [
        'snakemake',
        '--profile', profile,
        '-s', snakefile,
    ]

    if args.cluster:
        cluster_options = {
            'cluster-cancel' : 'qdel',
            'cluster': os.path.join(snakepath, 'cluster', 'qsub-submit.py'),
            'cluster-status': os.path.join(snakepath, 'cluster', 'qsub-status.py'),
            'jobscript': os.path.join(snakepath, 'cluster', 'qsub-jobscript.sh'),
        }

        for k, v in cluster_options.items():
            command.extend([f'--{k}', str(v)])
    else:
        command.extend(
            ['--cores', str(args.cores), '--latency-wait', '5', '--restart-times', '0']
        )

    if not args.snake_args is None:
        command.extend( args.snake_args )

    command.extend([
        '--configfiles', args.samples_config, args.genomes_config, args.parameters_config, resources_config,
    ])

    # add configuration arguments to the command string
    command.append('--config')
    add_snake_arg(command, '_external_scripts', scripts_path)
    add_snake_arg(command, '_run_pipeline', args.run)

    return command


def get_parser():
    
    parser = argparse.ArgumentParser("Command to run metagenomics pipeline")
    subparser = parser.add_subparsers(dest='command')

    def add_common_args(parser):
        
        argument_group = parser.add_argument_group('Common arguments')
        argument_group.add_argument('--cluster', action = 'store_true', default=False,
                                help = 'Run jobs on cluster instead of locally.')
        argument_group.add_argument('--cores', '-c', type = int, default=1,)
        argument_group.add_argument('--snake-args', '-s', nargs = argparse.REMAINDER, 
                                help = 'Arguments to pass to snakemake')
        
    
    def add_pipeline_args(parser):
        argument_group = parser.add_argument_group('Pipeline arguments')
        argument_group.add_argument('--samples-config', '-samples', type = check_file_exists, required=True,
                        help = 'Specifies the samples and groups of samples to process')
        argument_group.add_argument('--genomes-config','-genomes', type = check_file_exists, required=True,
                                help = 'Configuration file for sequences and annotations')
        argument_group.add_argument('--parameters-config', '-parameters', type = check_file_exists, required=True,
                                help = 'Configuration file for parameters')
    

    buildref_subparser = subparser.add_parser('build-ref', help = 'Download genomes and create indexes for various tools.')
    add_pipeline_args(buildref_subparser)
    add_common_args(buildref_subparser)
    
    # each subcommand has a "setup" function that adds subcommand-specific arguments to the command string
    # and a pipeline name ("run") which tells snakemake which files to target
    buildref_subparser.set_defaults(run = 'build-ref')

    align_subparser = subparser.add_parser('align', help = 'Align reads to reference genome')
    add_pipeline_args(align_subparser)
    add_common_args(align_subparser)
    align_subparser.set_defaults(run = 'align')

    variants_subparser = subparser.add_parser('variants', help = 'Call variants from aligned reads')
    add_pipeline_args(variants_subparser)
    add_common_args(variants_subparser)
    variants_subparser.set_defaults(run = 'variants')
    
    return parser


def main(args):

    command = get_snakemake_command(args)
    
    print("""
      _________       .__.__  .__  .__      __________.__              .__  .__               
 /   _____/ _____ |__|  | |  | |__| ____\______   \__|_____   ____ |  | |__| ____   ____  
 \_____  \ /     \|  |  | |  | |  |/ __ \|     ___/  \____ \_/ __ \|  | |  |/    \_/ __ \ 
 /        \  Y Y  \  |  |_|  |_|  \  ___/|    |   |  |  |_> >  ___/|  |_|  |   |  \  ___/ 
/_______  /__|_|  /__|____/____/__|\___  >____|   |__|   __/ \___  >____/__|___|  /\___  >
        \/      \/                     \/            |__|        \/             \/     \/ 
    """, file = sys.stderr)

    print('Running command:\n' + '\033[94m' + ' '.join(command) + '\033[0m\n\n', file = sys.stderr)

    #4. Run the command string
    subprocess.run(
        ' '.join(command), shell = True,
    )


if __name__ == "__main__":
    
    try:
        args = get_parser().parse_args()
        args.cluster
    except AttributeError:
        print(get_parser().format_help(), file = sys.stderr)
    else:
        main(args)
    
